# การอธิบายคุณสมบัติ Abstraction (การซ่อนรายละเอียด) ใน OOP

# Abstraction หรือ การซ่อนรายละเอียด หมายถึงการซ่อนข้อมูลหรือรายละเอียดที่ซับซ้อนออกจากผู้ใช้งาน
# และแสดงเฉพาะฟังก์ชันที่จำเป็นในการใช้งาน เพื่อให้โปรแกรมสามารถทำงานได้โดยไม่จำเป็นต้องรู้ข้อมูลภายใน
# โดยมุ่งเน้นให้ผู้ใช้งานสามารถโต้ตอบหรือใช้ฟังก์ชันได้ง่ายขึ้น โดยไม่ต้องรู้ว่าฟังก์ชันเหล่านั้นทำงานอย่างไร
#
# การใช้ Abstraction ช่วยให้โปรแกรมมีความเรียบง่าย สะอาด และมีประสิทธิภาพในการใช้งาน
# เพราะผู้ใช้งานไม่จำเป็นต้องสนใจข้อมูลภายในหรือกระบวนการที่เกิดขึ้นภายใน แต่สามารถใช้งานได้โดยตรง
# ซึ่งช่วยลดความซับซ้อนและเพิ่มความเข้าใจในการทำงานของโปรแกรม

# ตัวอย่าง:

from abc import ABC, abstractmethod  # การนำเข้า ABC สำหรับการสร้างคลาสที่เป็น Abstract

class Robot(ABC):
    """
    คลาสนี้เป็นคลาสที่ Abstract ซึ่งหมายความว่าไม่สามารถสร้างอ็อบเจกต์จากคลาสนี้ได้โดยตรง
    แต่จะใช้เป็นพื้นฐานในการสร้างคลาสหุ่นยนต์ที่สืบทอดมาจากมัน
    """

    @abstractmethod
    def move(self):
        """ 
        ฟังก์ชันนี้ถูกกำหนดให้ต้องถูก implement โดยคลาสที่สืบทอดมาจาก Robot
        โดยที่ไม่ต้องรู้ว่า move() ทำงานอย่างไรภายใน
        """
        pass

    @abstractmethod
    def stop(self):
        """
        ฟังก์ชันนี้ถูกกำหนดให้ต้องถูก implement โดยคลาสที่สืบทอดมาจาก Robot
        """
        pass

# สร้างคลาสที่สืบทอดมาจาก Robot
class WalkingRobot(Robot):
    def move(self):
        print("Walking Robot is moving forward.")

    def stop(self):
        print("Walking Robot has stopped.")

class FlyingRobot(Robot):
    def move(self):
        print("Flying Robot is flying forward.")

    def stop(self):
        print("Flying Robot has landed.")

# การสร้างอ็อบเจกต์จากคลาสที่สืบทอด
walking_robot = WalkingRobot()
flying_robot = FlyingRobot()

# เรียกใช้ method ที่ถูกสืบทอดมาจากคลาส Robot
walking_robot.move()  # Output: Walking Robot is moving forward.
flying_robot.move()  # Output: Flying Robot is flying forward.

# คำอธิบาย:
# - ในตัวอย่างนี้ เราสร้างคลาส `Robot` ที่เป็น abstract class โดยมี method `move()` และ `stop()` ที่เป็น abstract method
# - คลาส `WalkingRobot` และ `FlyingRobot` ได้ implement ฟังก์ชันเหล่านี้ตามที่กำหนดไว้ใน `Robot`
# - ผู้ใช้ไม่จำเป็นต้องรู้ว่าฟังก์ชันเหล่านี้ทำงานอย่างไรภายใน แต่สามารถเรียกใช้ `move()` และ `stop()` ได้เลย
# - **Abstraction** ช่วยให้เราซ่อนรายละเอียดภายในและมุ่งเน้นที่การทำงานของฟังก์ชันหลักเท่านั้น

# ขยายความ:

# ในโปรแกรมที่มีการใช้ **Abstraction**, คลาสที่เป็น Abstract (หรือคลาสที่ไม่สามารถสร้างอ็อบเจกต์ได้) จะทำหน้าที่เป็น 
# แบบแผนสำหรับการสร้างคลาสที่ต้องการให้ implement ฟังก์ชันต่างๆ ที่จำเป็นสำหรับการทำงานบางอย่าง แต่ไม่จำเป็นต้องเปิดเผย 
# วิธีการทำงานภายในของแต่ละฟังก์ชัน

# ในตัวอย่างนี้ คลาส `Robot` เป็นคลาสที่ไม่สามารถสร้างอ็อบเจกต์ได้โดยตรงเนื่องจากมี method ที่ไม่ได้ implement (คือ `move()` และ `stop()`)
# ซึ่งถูกประกาศให้เป็น `abstractmethod` เพื่อให้คลาสที่สืบทอดต้อง implement ฟังก์ชันเหล่านี้
# เมื่อเราใช้คลาสที่สืบทอดจาก `Robot` เช่น `WalkingRobot` หรือ `FlyingRobot,` เราจะสามารถสร้างอ็อบเจกต์จากคลาสเหล่านี้ได้
# และเรียกใช้ฟังก์ชัน `move()` และ `stop()` ได้อย่างสะดวก โดยไม่จำเป็นต้องรู้ว่าเหล่านี้ทำงานอย่างไรภายใน

# **ข้อดีของ Abstraction**:
# 1. **ลดความซับซ้อน**: ผู้ใช้งานหรือโปรแกรมเมอร์ไม่จำเป็นต้องรู้รายละเอียดภายในที่ซับซ้อนของแต่ละฟังก์ชัน
# 2. **เพิ่มความเข้าใจ**: การซ่อนรายละเอียดช่วยให้โค้ดเข้าใจง่ายขึ้นและมุ่งเน้นที่ฟังก์ชันการทำงานหลัก
# 3. **ปรับปรุงการบำรุงรักษา**: หากมีการเปลี่ยนแปลงรายละเอียดภายในของฟังก์ชัน เราสามารถเปลี่ยนแปลงภายในได้โดยไม่กระทบต่อผู้ใช้งาน

# **สรุป**:
# - **Abstraction** ช่วยให้เราสามารถซ่อนรายละเอียดที่ซับซ้อนของการทำงานภายในและแสดงเพียงฟังก์ชันที่จำเป็นออกมา
# - การสร้าง **Abstract Class** และ **abstractmethod** ทำให้คลาสที่สืบทอดสามารถ implement ฟังก์ชันที่จำเป็น
# - ผู้ใช้หรือโปรแกรมเมอร์สามารถเรียกใช้ฟังก์ชันได้อย่างสะดวกโดยไม่จำเป็นต้องรู้วิธีการทำงานภายใน
# - ช่วยให้โค้ดสะอาดและลดความซับซ้อนในการใช้งาน

# **ส่วนขยายความเพิ่มเติม**:

# 1. **Abstraction (การซ่อนรายละเอียด)**:
#    - คือการซ่อนรายละเอียดภายในของฟังก์ชันหรือคลาส ซึ่งจะทำให้ผู้ใช้ไม่จำเป็นต้องรู้ว่าโค้ดทำงานอย่างไรภายใน แต่สามารถใช้ฟังก์ชันนั้นได้ง่ายๆ การซ่อนรายละเอียดนี้จะช่วยลดความซับซ้อนและทำให้โค้ดเข้าใจง่ายขึ้น
#    - การใช้ `@abstractmethod` ในการกำหนดให้คลาสที่เป็น Abstract จะต้อง implement ฟังก์ชันที่กำหนดไว้ในคลาสนั้นๆ
#    - ในตัวอย่างนี้ คลาส `Robot` เป็นคลาสที่ไม่สามารถสร้างอ็อบเจกต์ได้โดยตรง แต่จะใช้เป็นพื้นฐานให้กับคลาสที่สืบทอดมา เช่น `WalkingRobot` และ `FlyingRobot`
# 
# 2. **Abstract Class**:
#    - Abstract Class คือคลาสที่ไม่สามารถสร้างอ็อบเจกต์ได้โดยตรง แต่จะต้องใช้เป็นแม่แบบสำหรับคลาสที่สืบทอดจากมัน
#    - ในตัวอย่างนี้ `Robot` เป็น Abstract Class ที่ประกอบด้วย abstract methods ที่บังคับให้คลาสที่สืบทอดต้อง implement
#
# 3. **ประโยชน์ของการใช้ Abstraction**:
#    - ทำให้โค้ดสะอาดขึ้นและใช้งานได้ง่าย
#    - ช่วยให้โปรแกรมเมอร์โฟกัสไปที่การใช้งานที่สำคัญโดยไม่ต้องสนใจรายละเอียดภายใน
#    - ช่วยเพิ่มความยืดหยุ่นในการพัฒนา เพราะการเปลี่ยนแปลงภายในคลาสที่ซ่อนรายละเอียดจะไม่กระทบต่อการใช้งาน

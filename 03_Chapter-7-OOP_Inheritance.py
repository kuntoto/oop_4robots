# การอธิบายคุณสมบัติ Inheritance (การสืบทอด) ใน OOP

# Inheritance หรือ การสืบทอด คือคุณสมบัติที่ช่วยให้เราสามารถสร้างคลาสใหม่ที่สืบทอดคุณสมบัติ
# และพฤติกรรมจากคลาสเดิม (คลาสแม่) โดยที่ไม่ต้องเขียนโค้ดใหม่ทั้งหมด
# คลาสใหม่ที่สืบทอดจะสามารถใช้คุณสมบัติและฟังก์ชันจากคลาสแม่ได้ทันที และสามารถปรับปรุงหรือเพิ่มเติมฟังก์ชันได้
#
# การใช้ Inheritance ช่วยเพิ่มความสะดวกในการพัฒนาโค้ด ทำให้เราสามารถนำเอาคลาสที่มีอยู่แล้วมาใช้ใหม่
# และสามารถทำให้คลาสใหม่ที่สร้างขึ้นมาโดยไม่ต้องเริ่มจากศูนย์
#
# **ข้อดีของ Inheritance**:
# 1. ช่วยลดการทำงานซ้ำซ้อน เพราะเราสามารถนำคุณสมบัติของคลาสที่มีอยู่แล้วมาใช้
# 2. ทำให้โค้ดมีความยืดหยุ่นและง่ายในการดูแล
# 3. ช่วยให้โค้ดดูสะอาดและเข้าใจง่าย
# 4. สามารถสร้างการปรับปรุงหรือฟังก์ชันใหม่ๆ ในคลาสลูกได้โดยไม่กระทบกับคลาสแม่

# ตัวอย่าง:

class Robot:
    """
    คลาสแม่ (Parent Class) ที่เป็นพื้นฐานของหุ่นยนต์
    คลาสนี้มีฟังก์ชันทั่วไปที่หุ่นยนต์ทุกตัวจะต้องทำได้ เช่น การเคลื่อนที่และการหยุด
    """

    def move(self):
        print("Robot is moving forward.")

    def stop(self):
        print("Robot has stopped.")

# คลาสลูก (Child Class) ที่สืบทอดมาจากคลาส Robot
class WalkingRobot(Robot):
    """
    คลาสลูกที่สืบทอดมาจาก Robot และเพิ่มฟังก์ชันพิเศษสำหรับหุ่นยนต์เดิน
    """

    def move(self):
        print("Walking Robot is walking forward.")

    def stop(self):
        print("Walking Robot has stopped.")

# คลาสลูกอีกตัวที่สืบทอดจาก Robot และเพิ่มฟังก์ชันพิเศษสำหรับหุ่นยนต์บิน
class FlyingRobot(Robot):
    """
    คลาสลูกที่สืบทอดมาจาก Robot และเพิ่มฟังก์ชันพิเศษสำหรับหุ่นยนต์บิน
    """

    def move(self):
        print("Flying Robot is flying forward.")

    def stop(self):
        print("Flying Robot has landed.")

# สร้างอ็อบเจกต์จากคลาสลูก
walking_robot = WalkingRobot()
flying_robot = FlyingRobot()

# เรียกใช้ฟังก์ชันที่สืบทอดมา
walking_robot.move()  # Output: Walking Robot is walking forward.
flying_robot.move()   # Output: Flying Robot is flying forward.

walking_robot.stop()  # Output: Walking Robot has stopped.
flying_robot.stop()   # Output: Flying Robot has landed.

# คำอธิบาย:
# - ในตัวอย่างนี้ เรามีคลาส `Robot` ซึ่งเป็นคลาสแม่ (Parent Class) ที่มีฟังก์ชัน `move()` และ `stop()`
# - คลาส `WalkingRobot` และ `FlyingRobot` เป็นคลาสลูก (Child Classes) ที่สืบทอดมาจาก `Robot`
# - คลาสลูกแต่ละตัวสามารถเขียนฟังก์ชันใหม่เพื่อแทนที่ฟังก์ชันในคลาสแม่ได้ เช่น การเคลื่อนที่
# - การใช้ **Inheritance** ช่วยให้เราไม่ต้องเขียนฟังก์ชัน `move()` และ `stop()` ใหม่ทุกครั้งที่ต้องการสร้างหุ่นยนต์ประเภทใหม่

# ขยายความ:

# 1. **Inheritance** คือกระบวนการที่คลาสลูกสามารถสืบทอดคุณสมบัติและพฤติกรรมจากคลาสแม่
# 2. ในตัวอย่างนี้, คลาส `WalkingRobot` และ `FlyingRobot` สืบทอดฟังก์ชันจาก `Robot` แต่สามารถเขียนฟังก์ชัน `move()` 
#    และ `stop()` ใหม่ในคลาสลูกเพื่อให้เหมาะสมกับพฤติกรรมของหุ่นยนต์แต่ละประเภท
# 3. ฟังก์ชันที่เขียนในคลาสลูกจะทับฟังก์ชันเดิมจากคลาสแม่หากมีชื่อเหมือนกัน ซึ่งเรียกว่า **Method Overriding**
# 4. โดยที่ฟังก์ชันที่ถูกเรียกใช้งานจะเป็นฟังก์ชันจากคลาสลูกไม่ใช่ฟังก์ชันจากคลาสแม่

# **ข้อดีของ Inheritance**:
# - ช่วยให้เราสามารถใช้ฟังก์ชันหรือคุณสมบัติจากคลาสที่มีอยู่แล้ว (คลาสแม่) โดยไม่ต้องเขียนโค้ดใหม่
# - ทำให้โค้ดสะอาดขึ้นและสะดวกขึ้นในการพัฒนา
# - ช่วยให้สามารถเพิ่มพฤติกรรมใหม่ให้กับคลาสลูกได้โดยไม่ต้องเปลี่ยนแปลงคลาสแม่
# - การใช้ Inheritance ทำให้การทำงานระหว่างคลาสแม่และคลาสลูกมีความสัมพันธ์กันและทำงานร่วมกันได้อย่างมีประสิทธิภาพ

# **ส่วนขยายความเพิ่มเติม**:

# 1. **การสืบทอด (Inheritance)**:
#    - คือการสร้างคลาสใหม่ที่สืบทอดคุณสมบัติและฟังก์ชันจากคลาสเก่า โดยที่คลาสใหม่สามารถใช้คุณสมบัติของคลาสเก่าได้
#    - คลาสใหม่สามารถปรับปรุงหรือเพิ่มเติมฟังก์ชันบางอย่างโดยไม่ต้องทำการเขียนใหม่ทั้งหมด
#    - การใช้ Inheritance ช่วยลดการซ้ำซ้อนของโค้ดและทำให้โค้ดมีความยืดหยุ่นในการพัฒนา

# 2. **Method Overriding**:
#    - คือกระบวนการที่คลาสลูกเขียนฟังก์ชันใหม่เพื่อแทนที่ฟังก์ชันที่มีอยู่ในคลาสแม่
#    - ในตัวอย่างนี้, `WalkingRobot` และ `FlyingRobot` สืบทอดฟังก์ชัน `move()` และ `stop()` จากคลาสแม่ `Robot`
#      และทำการเปลี่ยนแปลงพฤติกรรมตามที่ต้องการ เช่น `move()` ใน `WalkingRobot` จะพูดว่า "Walking Robot is walking forward."
#      แต่ใน `FlyingRobot` จะพูดว่า "Flying Robot is flying forward."

# 3. **ความสัมพันธ์ระหว่างคลาสแม่และคลาสลูก**:
#    - คลาสลูกสามารถใช้คุณสมบัติและฟังก์ชันทั้งหมดที่มีในคลาสแม่ได้โดยไม่ต้องเขียนซ้ำ
#    - การใช้ Inheritance ช่วยให้การพัฒนาโปรแกรมเป็นระเบียบและสามารถจัดการคลาสต่างๆ ได้ง่ายขึ้น
#    - หากต้องการแก้ไขหรือปรับปรุงฟังก์ชันในคลาสแม่ การเปลี่ยนแปลงนี้จะส่งผลต่อคลาสลูกที่สืบทอดมาจากมัน
